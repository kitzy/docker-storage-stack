networks:
  proxy:
    external: true
    name: proxy

services:
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    stop_grace_period: 30s
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER: "on"
      # these must be the public HTTPS hostnames youâ€™ll put in NPM
      MINIO_SERVER_URL: https://${MINIO_S3_HOST}
      MINIO_BROWSER_REDIRECT_URL: https://${MINIO_CONSOLE_HOST}
    volumes:
      - /mnt/minio:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks: [proxy]

  minio-bootstrap:
    image: quay.io/minio/mc:latest
    container_name: minio-bootstrap
    depends_on:
      - minio
    restart: "no"
    entrypoint: ["/bin/sh","-c"]
    command: >
      set -euo pipefail
      && mc alias set local http://minio:9000 "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"
      && mc admin user add   local "${FLEET_S3_ACCESS_KEY_ID}" "${FLEET_S3_SECRET_ACCESS_KEY}" || true
      && mc admin policy create local fleet-readwrite /tmp/fleet-readwrite.json || true
      && mc admin policy attach local fleet-readwrite --user "${FLEET_S3_ACCESS_KEY_ID}"
      && mc mb local/${FLEET_SOFTWARE_BUCKET} || true
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      FLEET_S3_ACCESS_KEY_ID: ${FLEET_S3_ACCESS_KEY_ID}
      FLEET_S3_SECRET_ACCESS_KEY: ${FLEET_S3_SECRET_ACCESS_KEY}
      FLEET_SOFTWARE_BUCKET: ${FLEET_SOFTWARE_BUCKET}
    volumes:
      - type: bind
        source: ./policies
        target: /tmp
    networks: [proxy]
